
name: test_windows_dockerfile

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:




  build_and_test:
    name: "Run OpenSSH Daemon in a Windows Runner, and test it using Python."
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v4

    - name: "Check if in admin group"
      run: (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

    - name: "Check if OpenSSH already available"
      run: Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'

    # - name: "Install the OpenSSH Client"
    #   run: Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0

    - name: "Add local user"
      run: net USER ssh "Passw0rd" /ADD && net localgroup "Administrators" "ssh" /ADD

    - name: "Install the OpenSSH Server"
      run: Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

    - name: "Start the sshd service"
      run: Start-Service sshd 
      # run: Start-Service sshd -RunAsAdmin

    # - name: "Test SSH Server"
    #   run: ssh ssh@localhost "echo Hello_World"
    # - name: "OPTIONAL but recommended"
    #   run: Set-Service -Name sshd -StartupType 'Automatic'

    # - name: "Confirm the Firewall rule is configured. " 
    #   # It should be created automatically by setup. Run the following to verify"
    #   run: >
    #     if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
    #       Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    #       New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
    #     } else {
    #       Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
    # }

    - uses: actions/setup-python@v5
      with:
        python-version: '3.10' 
    
    - run: >
        pip install
        paramiko
    #     docker
    #     dockerfile-generator
        
    - name: "Test the SSH server with Python script"
      run: python test_windows_dockerfile.py

    # - name: "Cache the Docker image"
    #   uses: ScribeMD/docker-cache@0.3.7
    #   with:
    #     key: docker-${{ runner.os }}-${{ hashFiles('./Dockerfile') }}
        
    # - name: "Build the Windows Dockerfile" 
    #   run: docker build -t powershell_windows_ssh_server .

    # - name: "Run the Windows Docker image" 
    #   # run: docker run --rm -d -p 22:22 --name ssh_server powershell_windows_ssh_server
    #   run: docker run --rm -d --name ssh_server --volume ${{ github.workspace }}:c:\OpenSSH-Win64\  powershell_windows_ssh_server
        
    # - name: "Build the Windows Dockerfile" 
    #   run: docker build -t python_windows_http_server .

    # - name: "Run the Windows Docker image" 
    #   run: docker run --rm -d -p 22:22 --name ssh_server python_windows_http_server

    # - name: "Test the http server"
    #   run: curl localhost:22

    # - name: "Find Container IP address"
    #   run: docker inspect -f "{{ .NetworkSettings.Networks.nat.IPAddress }}" ssh_server

    # - run: ssh ssh@localhost

    # 

    # - run: docker container ps --all

    # - name: "Install Python script dependencies. "
    #   run: >
    #     docker exec ssh_server pip install
    #     paramiko

    # - name: "Start the SSH server process"
    #   run: docker exec -d ssh_server c:\\PS7\\pwsh.EXE -NoExit -Command Start-Service sshd 

    # - name: "Run Hello World via paramiko, saving to .json, Python script"
    #   run: docker exec ssh_server python test_windows_dockerfile.py
      
    # - name: upload special chars files
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: special_chars
    #     path: test.json
